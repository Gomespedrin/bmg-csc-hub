import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Fun√ß√£o para criar slug a partir de um nome
export function createSlug(name: string): string {
  return name
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^a-z0-9\s-]/g, '') // Remove caracteres especiais
    .replace(/\s+/g, '-') // Substitui espa√ßos por h√≠fens
    .replace(/-+/g, '-') // Remove h√≠fens duplicados
    .trim()
    .replace(/^-+|-+$/g, ''); // Remove h√≠fens no in√≠cio e fim
}

// Fun√ß√£o para criar slug com ID para garantir unicidade
export function createSlugWithId(name: string, id: string): string {
  const slug = createSlug(name);
  return `${slug}-${id}`;
}

// Fun√ß√£o para extrair ID de um slug
export function extractIdFromSlug(slug: string): string {
  if (!slug) return '';
  
  console.log('üîç Extracting ID from slug:', slug);
  
  // Procurar por um padr√£o UUID no final do slug
  const uuidPattern = /([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$/i;
  const match = slug.match(uuidPattern);
  
  if (match) {
    console.log('‚úÖ Found UUID match:', match[1]);
    return match[1];
  }
  
  // Fallback: retornar o √∫ltimo segmento se n√£o encontrar UUID
  const parts = slug.split('-');
  const lastPart = parts[parts.length - 1] || '';
  
  console.log('üìù Slug parts:', parts, 'Last part:', lastPart);
  
  // Verificar se o √∫ltimo segmento parece ser um UUID
  if (uuidPattern.test(lastPart)) {
    console.log('‚úÖ Last part is UUID:', lastPart);
    return lastPart;
  }
  
  console.log('‚ö†Ô∏è No UUID found, returning last part:', lastPart);
  return lastPart;
}

// Fun√ß√£o para criar URL amig√°vel para √°rea
export function createAreaUrl(areaName: string, areaId: string): string {
  const slug = createSlug(areaName);
  const finalUrl = `/areas/${slug}-${areaId}`;
  console.log('üîó Creating area URL:', { areaName, areaId, slug, finalUrl });
  return finalUrl;
}

// Fun√ß√£o para criar URL amig√°vel para processo
export function createProcessoUrl(processoName: string, processoId: string): string {
  const slug = createSlug(processoName);
  return `/processos/${slug}-${processoId}`;
}

// Fun√ß√£o para criar URL amig√°vel para subprocesso
export function createSubprocessoUrl(subprocessoName: string, subprocessoId: string): string {
  const slug = createSlug(subprocessoName);
  return `/subprocessos/${slug}-${subprocessoId}`;
}

// Fun√ß√£o para criar URL amig√°vel para servi√ßo
export function createServicoUrl(servicoName: string, servicoId: string): string {
  const slug = createSlug(servicoName);
  return `/servicos/${slug}-${servicoId}`;
}
